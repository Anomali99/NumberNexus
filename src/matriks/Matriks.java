/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package matriks;

import javax.swing.JOptionPane;


/**
 *
 * @author fatiq
 */
public class Matriks extends javax.swing.JPanel {

    /**
     * Creates new form Sapes
     */
    public Matriks() {
        initComponents();
    }
    public int[][] matriks1;
    public int[][] matriks2;
    public int[][] matriksHasil;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pn_contenMenu = new javax.swing.JPanel();
        pn_scrole1 = new javax.swing.JScrollPane();
        ta_matriks1 = new javax.swing.JTextArea();
        pn_scrole3 = new javax.swing.JScrollPane();
        ta_matriksHasil = new javax.swing.JTextArea();
        pn_scrole2 = new javax.swing.JScrollPane();
        ta_matriks2 = new javax.swing.JTextArea();
        lb_hasil = new javax.swing.JLabel();
        lb_matriks1 = new javax.swing.JLabel();
        lb_matriks2 = new javax.swing.JLabel();
        lb_judul = new javax.swing.JLabel();
        btn_kali = new javax.swing.JButton();
        btn_tambah = new javax.swing.JButton();
        btn_kurangi = new javax.swing.JButton();

        pn_contenMenu.setBackground(new java.awt.Color(255, 255, 255));
        pn_contenMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ta_matriks1.setColumns(20);
        ta_matriks1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        ta_matriks1.setRows(5);
        ta_matriks1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255), 2));
        ta_matriks1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ta_matriks1FocusLost(evt);
            }
        });
        pn_scrole1.setViewportView(ta_matriks1);

        pn_contenMenu.add(pn_scrole1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, 420, 200));

        ta_matriksHasil.setColumns(20);
        ta_matriksHasil.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        ta_matriksHasil.setRows(5);
        ta_matriksHasil.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255), 2));
        pn_scrole3.setViewportView(ta_matriksHasil);

        pn_contenMenu.add(pn_scrole3, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 90, 370, 230));

        ta_matriks2.setColumns(20);
        ta_matriks2.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        ta_matriks2.setRows(5);
        ta_matriks2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 102, 255), 2));
        ta_matriks2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ta_matriks2FocusLost(evt);
            }
        });
        pn_scrole2.setViewportView(ta_matriks2);

        pn_contenMenu.add(pn_scrole2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 275, 420, 200));

        lb_hasil.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lb_hasil.setText("Hasil :");
        pn_contenMenu.add(lb_hasil, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, -1, -1));

        lb_matriks1.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lb_matriks1.setText("Matriks 1");
        pn_contenMenu.add(lb_matriks1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        lb_matriks2.setFont(new java.awt.Font("Segoe UI Black", 0, 24)); // NOI18N
        lb_matriks2.setText("Matriks 2");
        pn_contenMenu.add(lb_matriks2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, -1, -1));

        lb_judul.setFont(new java.awt.Font("Segoe UI Black", 3, 36)); // NOI18N
        lb_judul.setText("Operasi Matriks");
        pn_contenMenu.add(lb_judul, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, -1, -1));

        btn_kali.setBackground(new java.awt.Color(51, 102, 255));
        btn_kali.setFont(new java.awt.Font("Segoe UI Black", 3, 24)); // NOI18N
        btn_kali.setForeground(new java.awt.Color(255, 255, 255));
        btn_kali.setText("x");
        btn_kali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kaliActionPerformed(evt);
            }
        });
        pn_contenMenu.add(btn_kali, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 330, -1, -1));

        btn_tambah.setBackground(new java.awt.Color(51, 102, 255));
        btn_tambah.setFont(new java.awt.Font("Segoe UI Black", 3, 24)); // NOI18N
        btn_tambah.setForeground(new java.awt.Color(255, 255, 255));
        btn_tambah.setText("+");
        btn_tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_tambahActionPerformed(evt);
            }
        });
        pn_contenMenu.add(btn_tambah, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 330, -1, -1));

        btn_kurangi.setBackground(new java.awt.Color(51, 102, 255));
        btn_kurangi.setFont(new java.awt.Font("Segoe UI Black", 3, 24)); // NOI18N
        btn_kurangi.setForeground(new java.awt.Color(255, 255, 255));
        btn_kurangi.setText("-");
        btn_kurangi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_kurangiActionPerformed(evt);
            }
        });
        pn_contenMenu.add(btn_kurangi, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 330, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pn_contenMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 913, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pn_contenMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ta_matriks1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ta_matriks1FocusLost
        String[] rows = ta_matriks1.getText().split("\n");
        int jumlahBaris = rows.length;
        int jumlahKolom = rows[0].split(" ").length;
        String[][] s_matriks1 = new String[jumlahBaris][jumlahKolom];
        for(int i = 0; i < jumlahBaris; i++){
            String[] cols = rows[i].split(" ");
            for(int j = 0; j < jumlahKolom; j++){
                s_matriks1[i][j] = cols[j];
            }
        }
        matriks1 = new int[jumlahBaris][jumlahKolom];
        try{
        for(int k = 0; k < jumlahBaris; k++){
            for(int l = 0; l < jumlahKolom; l++){
                matriks1[k][l] = Integer.parseInt(s_matriks1[k][l]);
            }
        }
        }catch(NumberFormatException e){
          JOptionPane.showMessageDialog(this, "Masukkan input matriks dengan benar");
          ta_matriks1.setText("");
        }
    }//GEN-LAST:event_ta_matriks1FocusLost

    private void ta_matriks2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ta_matriks2FocusLost
        String[] rows = ta_matriks2.getText().split("\n");
        int jumlahBaris = rows.length;
        int jumlahKolom = rows[0].split(" ").length;
        String[][] s_matriks2 = new String[jumlahBaris][jumlahKolom];
        for(int i = 0; i < jumlahBaris; i++){
            String[] cols = rows[i].split(" ");
            for(int j = 0; j < jumlahKolom; j++){
                s_matriks2[i][j] = cols[j];
            }
        }
        matriks2 = new int[jumlahBaris][jumlahKolom];
        try{
        for(int k = 0; k < jumlahBaris; k++){
            for(int l = 0; l < jumlahKolom; l++){
                matriks2[k][l] = Integer.parseInt(s_matriks2[k][l]);
            }
        }
        }catch(NumberFormatException e){
          JOptionPane.showMessageDialog(this, "Masukkan input matriks dengan benar");
          ta_matriks2.setText("");
        }
    }//GEN-LAST:event_ta_matriks2FocusLost

    private void btn_kaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kaliActionPerformed
        if(matriks1[0].length == matriks2.length){
            matriksHasil = new int[matriks1.length][matriks2[0].length];
            int a = 0;
                for (int i = 0; i < matriks1.length; i++) {
                     for (int j = 0; j < matriks2[0].length; j++) {
                        for (int k = 0; k < matriks2.length; k++) {
                            a = a + matriks1[i][k] * matriks2[k][j];
                        }
                        matriksHasil[i][j] = a;
                        a = 0;
                     }
                }
            String x = "";
            for(int k = 0; k < matriksHasil.length; k++){
                for(int l = 0; l < matriksHasil[0].length; l++){
                    x = x + matriksHasil[k][l] +" ";
                }
                x=x+"\n";
            }
            ta_matriksHasil.setText(x);
        }
        else{
            String x = "Jumlah kolom matriks A harus sama dengan jumlah baris matriks B.\n" +
"Hasil perkalian matriks A dengan matriks B adalah matriks dengan dimensi (m x p), dimana m adalah jumlah baris matriks A dan p adalah jumlah kolom matriks B.\n" +
"Untuk menghitung elemen di posisi (i, j) dari hasil perkalian, kalikan elemen di baris ke-i dari matriks A dengan elemen di kolom ke-j dari matriks B dan jumlahkan hasil perkalian semua pasangan elemen tersebut.";
            ta_matriksHasil.setText(x);
        }
    }//GEN-LAST:event_btn_kaliActionPerformed

    private void btn_tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_tambahActionPerformed
        if(matriks1.length == matriks2.length && matriks1[0].length == matriks2[0].length){
            matriksHasil = new int[matriks1.length][matriks1[0].length];
            for(int i = 0; i < matriks1.length; i++){
                for(int j = 0; j < matriks1[0].length; j++){
                matriksHasil[i][j] = matriks1[i][j] + matriks2[i][j];
                }
            }
            String x = "";
            for(int k = 0; k < matriksHasil.length; k++){
                for(int l = 0; l < matriksHasil[0].length; l++){
                    x = x + matriksHasil[k][l] +" ";
                }
                x=x+"\n";
            }
            ta_matriksHasil.setText(x);
        }
        else{
            String x = "Matriks yang akan dijumlahkan atau dikurangi harus memiliki dimensi yang sama (sama-sama m x n).\n" +
"Untuk melakukan penjumlahan atau pengurangan, tambahkan atau kurangkan elemen pada posisi yang sama dari kedua matriks.\n" +
"Hasilnya adalah matriks dengan dimensi yang sama seperti matriks yang dijumlahkan atau dikurangi.";
            ta_matriksHasil.setText(x);
        }
    }//GEN-LAST:event_btn_tambahActionPerformed

    private void btn_kurangiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_kurangiActionPerformed
        if(matriks1.length == matriks2.length && matriks1[0].length == matriks2[0].length){
            matriksHasil = new int[matriks1.length][matriks1[0].length];
            for(int i = 0; i < matriks1.length; i++){
                for(int j = 0; j < matriks1[0].length; j++){
                matriksHasil[i][j] = matriks1[i][j] - matriks2[i][j];
                }
            }
            String x = "";
            for(int k = 0; k < matriksHasil.length; k++){
                for(int l = 0; l < matriksHasil[0].length; l++){
                    x = x + matriksHasil[k][l] +" ";
                }
                x=x+"\n";
            }
            ta_matriksHasil.setText(x);
        }
        else{
            String x = "Matriks yang akan dijumlahkan atau dikurangi harus memiliki dimensi yang sama (sama-sama m x n).\n" +
"Untuk melakukan penjumlahan atau pengurangan, tambahkan atau kurangkan elemen pada posisi yang sama dari kedua matriks.\n" +
"Hasilnya adalah matriks dengan dimensi yang sama seperti matriks yang dijumlahkan atau dikurangi.";
            ta_matriksHasil.setText(x);
        }
    }//GEN-LAST:event_btn_kurangiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_kali;
    private javax.swing.JButton btn_kurangi;
    private javax.swing.JButton btn_tambah;
    private javax.swing.JLabel lb_hasil;
    private javax.swing.JLabel lb_judul;
    private javax.swing.JLabel lb_matriks1;
    private javax.swing.JLabel lb_matriks2;
    private javax.swing.JPanel pn_contenMenu;
    private javax.swing.JScrollPane pn_scrole1;
    private javax.swing.JScrollPane pn_scrole2;
    private javax.swing.JScrollPane pn_scrole3;
    private javax.swing.JTextArea ta_matriks1;
    private javax.swing.JTextArea ta_matriks2;
    private javax.swing.JTextArea ta_matriksHasil;
    // End of variables declaration//GEN-END:variables

    
    
}
